import { images } from './1images.js';
document.addEventListener('DOMContentLoaded', () => {
	
	const main = document.querySelector('.main');
	const menuSetting = document.querySelectorAll('.home-settings');
	const btnArtistsQuiz = document.querySelector('.artists-quiz');
	const btnPicturesQuiz = document.querySelector('.pictures-quiz');
	const settingPage = document.querySelector('.settings');
	const settingPageClose = document.querySelector('.menu-btn');
	const settingPageClose2 = document.querySelector('.menu-btn2');
	const progressWidth = document.querySelector('.progress-width');
	const btnMute = document.querySelector('.btn-mute');
	const btnUnmute = document.querySelector('#btn-unmute');
	const volumeLevel = document.querySelector('#volume');
	const langChecked = document.querySelector('.switch-btn');
	const checkbox = document.getElementById("input-check1");
	const inputTime = document.getElementById("input-time");
	const btnDefault = document.querySelector(".settings-default");
	const btnSave = document.querySelector(".settings-save");
	const textSave = document.querySelector(".text-save");
	const imageArtistCategory = document.querySelectorAll(".item-image-artist");
	const pageCategoryArtist = document.querySelector(".categories");
	const pageRoundArtist = document.querySelector(".round");
	const backToHome = document.querySelectorAll(".back-to-home");
	const backToCategory = document.querySelectorAll(".back-to-category");
	
	const audio = new Audio();
	const audioCorrect = new Audio();
	const audioWrong = new Audio();
	const audioWin = new Audio();
	audioCorrect.src = './audio/correct-answer.mp3';
	audioWrong.src = './audio/wrong-answer.mp3';
	audioWin.src = './audio/win-round.mp3';
	let lang = 'ru';
	audio.muted = true;
	audio.volume = 0;

	//////////// разбитие исходных данных на массивы для категории Start
	const chunk = 10;
	let questionArtist = [];
	let questionPictures = [];
	let categoryQuestionArtist = [];
	let categoryQuestionPictures = [];

	function getQuestion() {
		images.forEach((item, index) => {
			if(index >= 0 && index <= 119) {
				questionArtist.push(item);
			}
			if(index >= 120 && index <= 239) {
				questionPictures.push(item);
			}
		});
	};
	getQuestion();

	function getCategory() {
		questionArtist.forEach((item, index) => {
			if(index < Math.ceil(questionArtist.length / chunk)) {
				categoryQuestionArtist.push(questionArtist.slice((index * chunk), (index * chunk) + chunk));
			}
		});		
		questionPictures.forEach((item, index) => {
			if(index < Math.ceil(questionPictures.length / chunk)) {
				categoryQuestionPictures.push(questionPictures.slice((index * chunk), (index * chunk) + chunk));
			}
		});
	};
	getCategory();

	//////////// разбитие исходных данных на массивы для категории End

	// получаем картинки для категорий
	function getImageCategory(arr, elements) {
		let bgNum = arr.map(images => images[0].imageNum);
		elements.forEach((item, index) => {
			const img = new Image();
			img.src = `https://raw.githubusercontent.com/andru12388/image-data/master/img/${bgNum[index]}.webp`;
			img.onload = () => {      
				item.style.backgroundImage = `url(${img.src})`;
			};
		});
	};
	getImageCategory(categoryQuestionArtist, imageArtistCategory);
	

	// audio icons update
	function updateVolume() {
		if(!audio.muted) {
			btnMute.classList.add('hidden');
			btnUnmute.classList.remove('hidden');
			audio.volume = 0;
			volumeLevel.value = `${audio.volume}`;
			volumeLevel.style.background = "linear-gradient(to right, #FFBCA2 0%, #FFBCA2 0%, #c4c4c4 0%, #c4c4c4 100%)";
			audio.muted = true;
		} else {
			btnMute.classList.remove('hidden');
			btnUnmute.classList.add('hidden');
			volumeLevel.value = audio.volume * 100;
			volumeLevel.style.background = `linear-gradient(to right, #FFBCA2 ${volumeLevel.value}%, #FFBCA2 ${volumeLevel.value}%, #c4c4c4 0%, #c4c4c4 100%)`;
			audio.muted = false;
		}
		
	};

	// audio value
	function audioVolume() {
		if(volumeLevel.value <= 0) {
			btnMute.classList.add('hidden');
			btnUnmute.classList.remove('hidden');
			audio.muted = true;
		} else {
			btnMute.classList.remove('hidden');
			btnUnmute.classList.add('hidden');
			audio.muted = false;
		}
		let volumeControl = volumeLevel.value;
		audio.volume = volumeControl / 100;
	};

	// add volume click all pages
	function soundClick() {
		volumeLevel.addEventListener('click', function() {
			audio.src = './audio/click.mp3';
			audio.play();
		});
	};
	soundClick();

	// Checkbox(true/false) => disabled buttons 
	function checkboxCheck() {
		if(checkbox.checked === true) {
			document.getElementById('input-time').disabled = false; 
			document.querySelectorAll('.btn-tickets').forEach(item => {
				item.disabled = false;
			});
		} else if(checkbox.checked === false) {
			document.getElementById('input-time').disabled = true;
			document.querySelectorAll('.btn-tickets').forEach(item => {
				item.disabled = true;
			}); 
		}
	};

	// reset settings
	function defaultSettings() {
		localStorage.clear();
		if(lang === 'en') {
			langChecked.classList.toggle('switch-on');
			translationRussian();
		}
		audio.volume = 0;
		audio.muted = true;
		updateVolume();
		audioVolume();
		inputTime.value = '5';
		checkbox.checked = false;
		checkboxCheck();
	};

	// output text for saved
	function outputTextSaved() {
		if(lang === 'en') {
			textSave.textContent = 'Saved!';
			textSave.style.opacity = '1'
			setTimeout(() => {
				textSave.style.opacity = '0';
				textSave.style.transition = 'opacity 0.5s ease';
				textSave.textContent = '';
			}, 1000);
		} else {
			textSave.textContent = 'Сохранено!';
			textSave.style.opacity = '1'
			setTimeout(() => {
				textSave.style.opacity = '0';
				textSave.style.transition = 'opacity 0.5s ease';
				textSave.textContent = '';
			}, 1000);
		}	
	};
	
	////////// Events /////////

	// pages (hide, visible) start
	menuSetting.forEach(icons => {
		icons.onclick = function(e) {
			e.preventDefault();
			settingPage.classList.add('settings_active');
		};
	});
	

	settingPageClose.onclick = function(e) {
		e.preventDefault();
		settingPage.classList.remove('settings_active');
	};

	settingPageClose2.onclick = function(e) {
		e.preventDefault();
		settingPage.classList.remove('settings_active');
	};

	btnArtistsQuiz.addEventListener('click', function() {
		getImageCategory(categoryQuestionArtist, imageArtistCategory);
		pageCategoryArtist.classList.add('categories_active');
		nextQuestion.style.display = 'block';
		nextQuestion2.style.display = 'none';
	});

	backToHome.forEach(links => {
		links.onclick = function(e) {
			e.preventDefault();
			pageRoundArtist.classList.remove('round_active');
			pageRoundArtist2.classList.remove('round2_active');
			pageCategoryArtist.classList.remove('categories_active');
			pageCategoryArtist2.classList.remove('categories2_active');
			scores.classList.remove('scores_active');
			numQuestion = 0;
			currentNumImage = 0;
			clearPagination();
			clearPagination2();
		};
	});

	backToCategory.forEach(link => {
		link.addEventListener('click', function(e) {
			e.preventDefault();
			pageRoundArtist.classList.remove('round_active');
			pageRoundArtist2.classList.remove('round2_active');
			pageCategoryArtist.classList.add('categories_active');
			scores.classList.remove('scores_active');
			numQuestion = 0;
			currentNumImage = 0;
			clearPagination();
			clearPagination2();
		});
	});
	
	// pages (hide, visible) end

	progressWidth.addEventListener('input', function() {
		const value = this.value;
		this.style.background = `linear-gradient(to right, #FFBCA2 0%, #FFBCA2 ${value}%, #c4c4c4 ${value}%, white 100%)`
	});

	btnMute.addEventListener('click', updateVolume);
	btnUnmute.addEventListener('click', updateVolume);
	volumeLevel.addEventListener('input', audioVolume);
	checkbox.addEventListener('click', checkboxCheck);
	btnDefault.addEventListener('click', defaultSettings);
	btnSave.addEventListener('click', function() {
		setLocalStorage();
		outputTextSaved();
	});

	// translation start
	const textDeveloper = document.querySelector('.app-dev');
	const settingTitleSetting = document.querySelector('.title-setting');
	const settingTitleVolume = document.querySelector('.text-volume');
	const settingTitleLang = document.querySelector('.text-lang');
	const settingTitleTime = document.querySelector('.text-time');
	const settingTitleAnswer = document.querySelector('.text-answer');
	const clickOn = new Event('on.switch');      // Создание своего кастомного события (Кнопка переключена в состояние on)
	const clickOff = new Event('off.switch');		// Создание своего кастомного события (Кнопка переключена в состояние off)

	langChecked.addEventListener('click', function() {
		langChecked.classList.toggle('switch-on');
		if(langChecked.classList.contains('switch-on') === true) {
			langChecked.dispatchEvent(clickOn);             // вызов метода кастомного события (Кнопка переключена в состояние on)
		} else {
			langChecked.dispatchEvent(clickOff);            // вызов метода кастомного события (Кнопка переключена в состояние off)
		}
	});

	function translationEnglish() {
		lang = 'en';
		btnArtistsQuiz.textContent = 'Artist quiz';
		btnPicturesQuiz.textContent = 'Pictures quiz';
		textDeveloper.textContent = 'App developer: Andrei Aliseyeu';
		settingTitleSetting.textContent = 'Settings';
		settingTitleVolume.textContent = 'Volume';
		settingTitleLang.textContent = 'Language';
		settingTitleTime.textContent = 'Time game';
		settingTitleAnswer.textContent = 'Time to answer';
		btnDefault.textContent = 'Default';
		btnSave.textContent = 'Save';
	};

	function translationRussian() {
		lang = 'ru';
		btnArtistsQuiz.textContent = 'Художники';
		btnPicturesQuiz.textContent = 'Картины';
		textDeveloper.textContent = 'Разработчик приложения: Алисеев Андрей'
		settingTitleSetting.textContent = 'Настройки';
		settingTitleVolume.textContent = 'Громкость';
		settingTitleLang.textContent = 'Язык';
		settingTitleTime.textContent = 'Время в игре';
		settingTitleAnswer.textContent = 'Время на ответ';
		btnDefault.textContent = 'Сброс';
		btnSave.textContent = 'Сохранить';
	};
	
	function isLangEn() {
		if(lang === 'en') {
			translationEnglish();
			langChecked.classList.toggle('switch-on');
		}
	};
	
	langChecked.addEventListener('on.switch', function() {    // Событие on.switch будет возникать при перемещении ползунка переключателя в положение включено, 
		translationRussian();
	});
	langChecked.addEventListener('off.switch', function() {   // Событие off.switch будет возникать при перемещении ползунка переключателя в положение  выключено.
		translationEnglish();
	});
	// translation end

	///////////// round page Start
	const roundImage = document.querySelector(".round-image");
	const nextQuestion = document.querySelector(".popup-next");
	const popupImage = document.querySelector(".popup-picture");
	const popupAnswer = document.querySelector(".popup-answer");
	const popupIcon = document.querySelector(".popup-icon");
	const popupAuthor = document.querySelector(".popup-author");
	const popupNamePicture = document.querySelector(".popup-name-picture");
	const popupNameYears = document.querySelector(".popup-years");
	const roundAnswer = document.querySelectorAll(".round-answer");
	const paginationItem = document.querySelectorAll(".pagination-item");
	const popupResult = document.querySelector(".popup-result");
	const popupResultNumber = document.querySelector(".popup-result-number");
	const popupBackToHome = document.querySelector(".popup-result-home");
	const popupBackToCategory = document.querySelector(".popup-result-next");
	const timerQuestion = document.querySelector(".round-time");
	const scoresImage = document.querySelectorAll(".scores-image-artist");
	const scoreItem = document.querySelectorAll(".score-item");
	const scores = document.querySelector(".scores");
	const scoresTitle = document.querySelectorAll(".scores-title");
	const scoresAuthor = document.querySelectorAll(".scores-author");
	const scoresYears = document.querySelectorAll(".scores-years");
	const scoresNameImage = document.querySelectorAll(".scores-name-image");
	const resultRoundQuiz = document.querySelectorAll(".result-round");
	
	let uniqueArtist = []; // уникальные имена авторов
	let currentRound = 0;
	let currentAuthor;
	let numQuestion = 0;
	let currentNumImage = 0;
	let removeFilterImage;
	let removeDisplayNone;
	let currentYear;
	let currentName;
	let numberCurrentAnswer = 0;
	let resultRound;
	let paginationRound;
	let interval;
	let arrayBooleanAnswer = []; // массив с ответами (Boolean), хранится в localStorage
	let counterImageScores = 0; // счетчик для картинок на странице "Результат"
	let currentScore; // актуальный номер кнопки "Результат"
	let filterResult = []; // массив сыгранного раунда  (значение filter для картинок), хранится в localStorage
	let displayNoneResult = []; // массив сыгранного раунда  (значение display для кнопок), хранится в localStorage
	let correctAnswerResult = []; // массив сыгранного раунда  (значение кол. правил. ответов), хранится в localStorage
	

	// уникальные имена авторов
	function allAuthorArtistCat() {
		let artist = [];
		questionArtist.forEach((person, index) => {
			artist.push(questionArtist[index].author)
		});
		let set = new Set(artist);
		set.forEach((value) => {
			uniqueArtist.push(value);
		});
	};
	allAuthorArtistCat();
	
	// рандом уникальных имен + имя текущего автора с записью и рандомом в массив
	function getRandomArrAnswer() {
		let randomArrAnswer = uniqueArtist.sort(() => Math.random() - Math.random()).slice(0, 6);
		let arrAnswer = [];
		arrAnswer.push(currentAuthor)
		for (const iterator of randomArrAnswer) {
			if(arrAnswer.length < 4) {
				if(iterator === currentAuthor) {
					continue;
				} else {
					arrAnswer.push(iterator)
				}
			};
		};
		return arrAnswer.sort(() => Math.random() - 0.5);
	};

	// вывод картинки в вопросе + запись имен авторов в кнопки
	function getImageRoundArtist(arr) {
		try {
			let arrRound = arr[currentRound];
			currentNumImage = arrRound[numQuestion].imageNum
			currentAuthor = arrRound[numQuestion].author;
			let answerHtml = getRandomArrAnswer();
			roundAnswer.forEach((answer, index) => {
				answer.textContent = answerHtml[index];
			});
			const img = new Image();
			img.src = `https://raw.githubusercontent.com/andru12388/image-data/master/full/${currentNumImage}full.webp`;
			img.onload = () => {      
				roundImage.style.backgroundImage = `url(${img.src})`;
			};
		} catch (error) {
			return;
		}
	};

	// вывод фильтров после перезагрузки(localStorage)
	function outputFilterResult() {
		imageArtistCategory.forEach((item, index) => {
			if(filterResult.length > index) {
				if(filterResult[index] === null)	{
					item.style.filter = `grayscale(100%)`;
				} else {
					item.style.filter = `grayscale(0%)`;
				}
			};
		});
	};

	// вывод видимости кнопок(Результат) после перезагрузки(localStorage)
	function outputDisplayNoneResult() {
		scoreItem.forEach((item, index) => {
			if(displayNoneResult.length > index) {
				if(displayNoneResult[index] === null)	{
					item.style.display = `none`;
				} else {
					item.style.display = `flex`;
				}
			};
		});
	};

	// вывод кол. прав. ответов после перезагрузки(localStorage)
	function outputCorrectAnswerResult() {
		resultRoundQuiz.forEach((item, index) => {
			if(correctAnswerResult.length > index) {
				if(correctAnswerResult[index] === null)	{
					item.textContent = '';
				} else {
					item.textContent = `${correctAnswerResult[index]}`;
				}
			};
		});
	};

	// запись параметров раунда для localStorage
	function saveResultQuiz() {
		let str = currentRound;
		filterResult[str] = 'grayscale(0%)';
		displayNoneResult[str] = 'flex';
		correctAnswerResult[str] = `${numberCurrentAnswer.toString()} / 10`;
	};

	// вывод popup с всеми данными
	function getPicturePopup(arr) {
		try {
			let arrRound = arr[currentRound];
			currentNumImage = arrRound[numQuestion].imageNum
			currentAuthor = arrRound[numQuestion].author;
			currentYear = arrRound[numQuestion].year;
			currentName = arrRound[numQuestion].name;
			const img = new Image();
			img.src = `https://raw.githubusercontent.com/andru12388/image-data/master/img/${currentNumImage}.webp`;
			img.onload = () => {      
				popupImage.style.backgroundImage = `url(${img.src})`;
			};
			popupNamePicture.textContent = currentName;
			popupAuthor.textContent = currentAuthor;
			popupNameYears.textContent = `, ${currentYear}`;
		} catch (error) {
			numQuestion = 0;
			currentNumImage = 0;
			clearPagination();
			removeFilterImage.style.filter = `grayscale(0%)`;
			removeDisplayNone.style.display = `flex`;
			popupResultNumber.textContent = `${numberCurrentAnswer.toString()} / 10`;
			resultRound.textContent = `${numberCurrentAnswer.toString()} / 10`;
			saveResultQuiz();
			numberCurrentAnswer = 0;
			popupResult.classList.add('popup-result_active');
			pageRoundArtist.classList.remove('round_active');
			if(audio.volume > 0) {
				audioWrong.volume = audio.volume;
				audioWin.play();
			}
			return;
		}
	};

	// получаем массив с ответами (Boolean), хранится в localStorage
	function getBooleanAnswer(arr) {
		let arrRound = arr[currentRound];
		currentNumImage = arrRound[numQuestion].imageNum;
		if(paginationRound.style.background === 'green') {
			arrayBooleanAnswer[currentNumImage] = 'true'
		} else if(paginationRound.style.background === 'red') {
			arrayBooleanAnswer[currentNumImage] = 'false'
		}
	};

	// вывод инфо о каждой картине в результатах
	function scoresDataOfPicture() {
		let author = [];
		let namePicture = [];
		let year = [];
		categoryQuestionArtist[currentScore].forEach(item => {
			author.push(item.author);
			namePicture.push(item.name);
			year.push(item.year);
		});
		scoresAuthor.forEach((items, index) => {
			items.textContent = author[index];
		});
		scoresYears.forEach((items, index) => {
			items.textContent = year[index];
		});
		scoresNameImage.forEach((items, index) => {
			items.textContent = namePicture[index];
		});
	};

	// вывод картинки в результатах (с фильтром или без)
	function getPictureScores(arr, n = 0) {
		scoresImage.forEach(item => {
			item.style.filter = `grayscale(100%)`;
		});
		scoresDataOfPicture();
		for (let i = n; i < n + 10; i++) {
			const img = new Image();
			img.src = `https://raw.githubusercontent.com/andru12388/image-data/master/img/${i}.webp`;
			scoresImage[counterImageScores].style.backgroundImage = `url(${img.src})`;
			if(arr[i] === 'true') {
				scoresImage[counterImageScores].style.filter = `grayscale(0%)`;
			}
			counterImageScores++;
		}
	};
	
	//запуск категории + add visible/hide page Round
	function numberRound() {
		imageArtistCategory.forEach(item => {
			item.onclick = function(event) {
				removeFilterImage = event.target;
				removeDisplayNone = event.target.nextElementSibling;
				resultRound = event.target.parentElement.previousElementSibling.children[1];
				let str = event.target.className.substring(event.target.className.length - 2);
				if(str[0] === '0') {
					str.substring(1)
				}
				currentRound = +str;
				getPicturePopup(categoryQuestionArtist);
				getImageRoundArtist(categoryQuestionArtist);
				if(checkbox.checked === true) {
					timer();
				} else {
					timerQuestion.textContent = '';
				}
				counterImageScores = 0;
				pageRoundArtist.classList.add('round_active');
			};
		});
	};
	numberRound();

	// сбрасываем цвет пагинации
	function clearPagination() {
		paginationItem.forEach(clear => {
			clear.style.background = `none`;
		});
	};

	// слушаем клики на варианты ответов + pagination
	function answerRound() {
		roundAnswer.forEach((answer, index) => {
			answer.addEventListener('click', function(event) {
				paginationRound = event.target.parentNode.previousElementSibling.children[numQuestion];

				if(event.target.textContent === currentAuthor) {
					numberCurrentAnswer++;
					popupAnswer.classList.add('popup-answer_active');
					popupIcon.style.background = `url("./images/dist/svg/correct_btn.svg") no-repeat 100% 100%`;
					paginationRound.style.background = `green`;
					if(checkbox.checked === true) {
						clearInterval(interval);
					}
					if(audio.volume > 0) {
						audioCorrect.volume = audio.volume;
						audioCorrect.play();
					}
				} else {
					popupAnswer.classList.add('popup-answer_active');
					popupIcon.style.background = `url("./images/dist/svg/error_btn.svg") no-repeat 100% 100%`;
					paginationRound.style.background = `red`;
					if(checkbox.checked === true) {
						clearInterval(interval);
					}
					if(audio.volume > 0) {
						audioWrong.volume = audio.volume;
						audioWrong.play();
					}
				}
				getBooleanAnswer(categoryQuestionArtist); 
			});
		});
	};
	answerRound();

	// Таймер для вопросов
	function timer() {
		let timerNum = inputTime.value;
		interval = setInterval(() => {
			timerQuestion.textContent = `00 :  ${timerNum.toString().padStart(2, "0")}`;
			timerNum--;
			if(timerNum === -1) {
				clearInterval(interval);
				popupAnswer.classList.add('popup-answer_active');
				popupIcon.style.background = `url("./images/dist/svg/error_btn.svg") no-repeat 100% 100%`;
				paginationItem[numQuestion].style.background = `red`;
				if(audio.volume > 0) {
					audioWrong.volume = audio.volume;
					audioWrong.play();
				}
			} else if(pageRoundArtist.classList.value === 'round') {
				clearInterval(interval);
			}
		}, 1000);
	};

	// показ или скрытие описания к блоку "Результат"
	function visibleScoresInfo() {
		scoresImage.forEach(item => {
			item.addEventListener('click', function(event) {
				let currentBlock = event.target.nextElementSibling;
				currentBlock.classList.add('scores-info_active');
				currentBlock.onclick = function() {
					currentBlock.classList.remove('scores-info_active');
				};
			});
		});
	};
	visibleScoresInfo();

	// переход к следующему вопросу (кнопка "Продолжить")
	function nextMatter() {
		popupAnswer.classList.remove('popup-answer_active');
		numQuestion++;
		currentNumImage++;
		getPicturePopup(categoryQuestionArtist);
		getImageRoundArtist(categoryQuestionArtist);
		if(checkbox.checked === true) {
			timer();
		} else {
			timerQuestion.textContent = '';
		}
	};

	nextQuestion.addEventListener('click', function() {
		nextMatter();
	});

	// вернуться к категориям после завершения раунда
	popupBackToCategory.addEventListener('click', function() {
		pageRoundArtist.classList.remove('round_active');
		pageRoundArtist2.classList.remove('round2_active');
		pageCategoryArtist.classList.add('categories_active');
		popupResult.classList.remove('popup-result_active');
		numQuestion = 0;
		currentNumImage = 0;
		clearPagination();
		clearPagination2();
	});

	// вернуться на гавную после завершения раунда
	popupBackToHome.addEventListener('click', function() {
		pageRoundArtist.classList.remove('round_active');
		pageRoundArtist2.classList.remove('round2_active');
		pageCategoryArtist.classList.remove('categories_active');
		pageCategoryArtist2.classList.remove('categories2_active');
		popupResult.classList.remove('popup-result_active');
		numQuestion = 0;
		currentNumImage = 0;
		clearPagination();
		clearPagination2();
	});

	// срабатывает при клике по кнопке "Результат"
	function outputScores() {
		counterImageScores = 0;
		for (let i = 0; i < 12; i++) {
			if(currentScore === i) getPictureScores(arrayBooleanAnswer, i * 10);
			continue;
		}
	};

	// слушаем клик по кнопке "Результат"
	scoreItem.forEach(item => {
		item.addEventListener('click', function(event) {
			let nameScoresTitle = event.target.parentElement.previousElementSibling.children[0].innerText;
			let str = event.target.className.substring(event.target.className.length - 2);
				if(str[0] === '0') {
					str.substring(1)
				}
				currentScore = +str;
				scoresTitle.forEach(item => item.textContent = nameScoresTitle);
				outputScores();
			scores.classList.add('scores_active');
		});
	});
	///////////// round page End
	
	//////////////////////////// PicturesQuiz Start

	const scoreItem2 = document.querySelectorAll(".score-item2");
	const imageArtistCategory2 = document.querySelectorAll(".item-image-artist2");
	const pageCategoryArtist2 = document.querySelector(".categories2");
	const pageRoundArtist2 = document.querySelector(".round2");
	const roundImage2 = document.querySelectorAll(".round-img");
	const nameAuthorPicture2 = document.querySelector(".name-author");
	const nextQuestion2 = document.querySelector(".popup-next2");
	const timerQuestion2 = document.querySelector(".round-time2");
	const paginationItem2 = document.querySelectorAll(".pagination-item2");
	const resultRoundQuiz2 = document.querySelectorAll(".result-round2");

	let uniqueArtist2 = [];
	let uniqueImage = [];
	let arrayBooleanAnswer2 = [];
	let interval2;
	let filterResult2 = []; // массив сыгранного раунда  (значение filter для картинок), хранится в localStorage
	let displayNoneResult2 = []; // массив сыгранного раунда  (значение display для кнопок), хранится в localStorage
	let correctAnswerResult2 = []; // массив сыгранного раунда  (значение кол. правил. ответов), хранится в localStorage

	btnPicturesQuiz.addEventListener('click', function() {
		getImageCategory(categoryQuestionPictures, imageArtistCategory2);
		pageCategoryArtist2.classList.add('categories2_active');
		nextQuestion.style.display = 'none';
		nextQuestion2.style.display = 'block';
	});

	function allUniqueImage() {
		let artist = Object.entries(images).map(item => item[1]);
		uniqueArtist2 = artist.filter((person) => person.author !== currentAuthor);
		uniqueImage = uniqueArtist2.map(item => item.imageNum);
	};
	

	function getRandomArrAnswer2() {
		let randomArrAnswer = uniqueImage.sort(() => Math.random() - Math.random()).slice(0, 3);
		let arrAnswer = [];
		arrAnswer.push(currentNumImage)
		for (const iterator of randomArrAnswer) {
			if(arrAnswer.length < 4) {
				arrAnswer.push(iterator)
			}
		};
		return arrAnswer.sort(() => Math.random() - 0.5);
	};
	
	function getImageRoundArtist2(arr) {
		try {
			let arrRound = arr[currentRound];
			currentNumImage = arrRound[numQuestion].imageNum
			currentAuthor = arrRound[numQuestion].author;
			nameAuthorPicture2.textContent = currentAuthor;
			allUniqueImage();
			let answerHtml = getRandomArrAnswer2();
			roundImage2.forEach((images, index) => {
				images.setAttribute('num', `${answerHtml[index]}`)
				const img = new Image();
				img.src = `https://raw.githubusercontent.com/andru12388/image-data/master/img/${answerHtml[index]}.webp`;
				img.onload = () => {      
					images.style.backgroundImage = `url(${img.src})`;
				};
			});
		} catch (error) {
			return;
		}
	};

	// вывод фильтров после перезагрузки(localStorage)
	function outputFilterResult2() {
		imageArtistCategory2.forEach((item, index) => {
			if(filterResult2.length > index) {
				if(filterResult2[index] === null)	{
					item.style.filter = `grayscale(100%)`;
				} else {
					item.style.filter = `grayscale(0%)`;
				}
			};
		});
	};

	// вывод видимости кнопок(Результат) после перезагрузки(localStorage)
	function outputDisplayNoneResult2() {
		scoreItem2.forEach((item, index) => {
			if(displayNoneResult2.length > index) {
				if(displayNoneResult2[index] === null)	{
					item.style.display = `none`;
				} else {
					item.style.display = `flex`;
				}
			};
		});
	};

	// вывод кол. прав. ответов после перезагрузки(localStorage)
	function outputCorrectAnswerResult2() {
		resultRoundQuiz2.forEach((item, index) => {
			if(correctAnswerResult2.length > index) {
				if(correctAnswerResult2[index] === null)	{
					item.textContent = '';
				} else {
					item.textContent = `${correctAnswerResult[index]}`;
				}
			};
		});
	};

	// запись параметров раунда для localStorage
	function saveResultQuiz2() {
		let str = currentRound;
		filterResult2[str] = 'grayscale(0%)';
		displayNoneResult2[str] = 'flex';
		correctAnswerResult2[str] = `${numberCurrentAnswer.toString()} / 10`;
	};

	function getPicturePopup2(arr) {
		try {
			let arrRound = arr[currentRound];
			currentNumImage = arrRound[numQuestion].imageNum
			currentAuthor = arrRound[numQuestion].author;
			currentYear = arrRound[numQuestion].year;
			currentName = arrRound[numQuestion].name;
			const img = new Image();
			img.src = `https://raw.githubusercontent.com/andru12388/image-data/master/img/${currentNumImage}.webp`;
			img.onload = () => {      
				popupImage.style.backgroundImage = `url(${img.src})`;
			};
			popupNamePicture.textContent = currentName;
			popupAuthor.textContent = currentAuthor;
			popupNameYears.textContent = `, ${currentYear}`;
		} catch (error) {
			numQuestion = 0;
			currentNumImage = 0;
			clearPagination2();
			removeFilterImage.style.filter = `grayscale(0%)`;
			removeDisplayNone.style.display = `flex`;
			popupResultNumber.textContent = `${numberCurrentAnswer.toString()} / 10`;
			resultRound.textContent = `${numberCurrentAnswer.toString()} / 10`;
			saveResultQuiz2();
			numberCurrentAnswer = 0;
			popupResult.classList.add('popup-result_active');
			pageRoundArtist2.classList.remove('round2_active');
			if(audio.volume > 0) {
				audioWrong.volume = audio.volume;
				audioWin.play();
			}
			return;
		}
	};

	function getBooleanAnswer2(arr) {
		let arrRound = arr[currentRound];
		currentNumImage = arrRound[numQuestion].imageNum;
		if(paginationRound.style.background === 'green') {
			arrayBooleanAnswer2[currentNumImage] = 'true'
		} else if(paginationRound.style.background === 'red') {
			arrayBooleanAnswer2[currentNumImage] = 'false'
		}
	};

	function scoresDataOfPicture2() {
		let author = [];
		let namePicture = [];
		let year = [];
		categoryQuestionPictures[currentScore].forEach(item => {
			author.push(item.author);
			namePicture.push(item.name);
			year.push(item.year);
		});
		scoresAuthor.forEach((items, index) => {
			items.textContent = author[index];
		});
		scoresYears.forEach((items, index) => {
			items.textContent = year[index];
		});
		scoresNameImage.forEach((items, index) => {
			items.textContent = namePicture[index];
		});
	};

	function getPictureScores2(arr, n = 120) {
		scoresImage.forEach(item => {
			item.style.filter = `grayscale(100%)`;
		});
		scoresDataOfPicture2();
		for (let i = n; i < n + 10; i++) {
			const img = new Image();
			img.src = `https://raw.githubusercontent.com/andru12388/image-data/master/img/${i}.webp`;
			scoresImage[counterImageScores].style.backgroundImage = `url(${img.src})`;
			if(arr[i] === 'true') {
				scoresImage[counterImageScores].style.filter = `grayscale(0%)`;
			}
			counterImageScores++;
		};
	};

	function numberRound2() {
		imageArtistCategory2.forEach(item => {
			item.onclick = function(event) {
				removeFilterImage = event.target;
				removeDisplayNone = event.target.nextElementSibling;
				resultRound = event.target.parentElement.previousElementSibling.children[1]
				let str = event.target.className.substring(event.target.className.length - 2);
				if(str[0] === '0') {
					str.substring(1)
				}
				currentRound = +str;
				getPicturePopup2(categoryQuestionPictures);
				getImageRoundArtist2(categoryQuestionPictures);
				if(checkbox.checked === true) {
					timer2();
				} else {
					timerQuestion2.textContent = '';
				}
				counterImageScores = 0;
				pageRoundArtist2.classList.add('round2_active');
			};
		});
	};
	numberRound2();

	function answerRound2() {
		roundImage2.forEach((answer, index) => {
			answer.addEventListener('click', function(event) {
				paginationRound = event.target.parentElement.nextElementSibling.children[numQuestion];

				if(event.target.getAttribute('num') === currentNumImage) {
					numberCurrentAnswer++;
					popupAnswer.classList.add('popup-answer_active');
					popupIcon.style.background = `url("./images/dist/svg/correct_btn.svg") no-repeat 100% 100%`;
					paginationRound.style.background = `green`;
					if(checkbox.checked === true) {
						clearInterval(interval2);
					}
					if(audio.volume > 0) {
						audioCorrect.volume = audio.volume;
						audioCorrect.play();
					}
				} else {
					popupAnswer.classList.add('popup-answer_active');
					popupIcon.style.background = `url("./images/dist/svg/error_btn.svg") no-repeat 100% 100%`;
					paginationRound.style.background = `red`;
					if(checkbox.checked === true) {
						clearInterval(interval2);
					}
					if(audio.volume > 0) {
						audioWrong.volume = audio.volume;
						audioWrong.play();
					}
				}
				getBooleanAnswer2(categoryQuestionPictures); 
			});
		});
	};
	answerRound2();

	function nextMatter2() {
		popupAnswer.classList.remove('popup-answer_active');
		numQuestion++;
		currentNumImage++;
		getPicturePopup2(categoryQuestionPictures);
		getImageRoundArtist2(categoryQuestionPictures);
		if(checkbox.checked === true) {
			timer2();
		} else {
			timerQuestion2.textContent = '';
		}
	};

	function clearPagination2() {
		paginationItem2.forEach(clear => {
			clear.style.background = `none`;
		});
	};

	function timer2() {
		let timerNum = inputTime.value;
		interval2 = setInterval(() => {
			timerQuestion2.textContent = `00 :  ${timerNum.toString().padStart(2, "0")}`;
			timerNum--;
			if(timerNum === -1) {
				clearInterval(interval2);
				popupAnswer.classList.add('popup-answer_active');
				popupIcon.style.background = `url("./images/dist/svg/error_btn.svg") no-repeat 100% 100%`;
				paginationItem2[numQuestion].style.background = `red`;
				if(audio.volume > 0) {
					audioWrong.volume = audio.volume;
					audioWrong.play();
				}
			} else if(pageRoundArtist2.classList.value === 'round2') {
				clearInterval(interval2);
			}
		}, 1000);
	};

	function outputScores2() {
		counterImageScores = 0;
		for (let i = 0; i < 12; i++) {
			if(currentScore === i) getPictureScores2(arrayBooleanAnswer2, i * 10 + 120);
			continue;
		}
	};

	scoreItem2.forEach(item => {
		item.addEventListener('click', function(event) {
			let nameScoresTitle = event.target.parentElement.previousElementSibling.children[0].innerText;
			let str = event.target.className.substring(event.target.className.length - 2);
				if(str[0] === '0') {
					str.substring(1)
				}
				currentScore = +str;
				scoresTitle.forEach(item => item.textContent = nameScoresTitle);
				outputScores2();
			scores.classList.add('scores_active');
		});
	});

	nextQuestion2.addEventListener('click', function() {
		nextMatter2();
	});

	// Local Storage save
	function setLocalStorage() {
		localStorage.setItem('input-time', inputTime.value);
		localStorage.setItem('box-checked', checkbox.checked);
		localStorage.setItem('audio-volume', audio.volume);
		localStorage.setItem('lang-user', lang);
		localStorage.setItem('arrayBooleanAnswer', JSON.stringify(arrayBooleanAnswer));
		localStorage.setItem('arrayBooleanAnswer2', JSON.stringify(arrayBooleanAnswer2));
		localStorage.setItem('filterResult', JSON.stringify(filterResult));
		localStorage.setItem('filterResult2', JSON.stringify(filterResult2));
		localStorage.setItem('displayNoneResult', JSON.stringify(displayNoneResult));
		localStorage.setItem('displayNoneResult2', JSON.stringify(displayNoneResult2));
		localStorage.setItem('correctAnswerResult', JSON.stringify(correctAnswerResult));
		localStorage.setItem('correctAnswerResult2', JSON.stringify(correctAnswerResult2));
		
	};
	window.addEventListener('beforeunload', setLocalStorage);

	// // Local Storage get
	function getLocalStorage() {
		if(localStorage.getItem('audio-volume')) {
			audio.volume = localStorage.getItem('audio-volume');
			volumeLevel.value = audio.volume * 100;
			updateVolume();
			audioVolume();
		}
		if(localStorage.getItem('input-time')) {
			inputTime.value = localStorage.getItem('input-time');
		}
		if(localStorage.getItem('box-checked')) {
			let isChecked = JSON.parse(localStorage.getItem("box-checked"));
			checkbox.checked = isChecked;
			checkboxCheck();
		}
		if(localStorage.getItem('lang-user')) {
			lang = localStorage.getItem('lang-user');
			isLangEn();
		}
		if(localStorage.getItem('filterResult')) {
			filterResult = JSON.parse(localStorage.getItem('filterResult'));
			outputFilterResult();
		}
		if(localStorage.getItem('filterResult2')) {
			filterResult2 = JSON.parse(localStorage.getItem('filterResult2'));
			outputFilterResult2();
		}
		if(localStorage.getItem('displayNoneResult')) {
			displayNoneResult = JSON.parse(localStorage.getItem('displayNoneResult'));
			outputDisplayNoneResult();
		}
		if(localStorage.getItem('displayNoneResult2')) {
			displayNoneResult2 = JSON.parse(localStorage.getItem('displayNoneResult2'));
			outputDisplayNoneResult2();
		}
		if(localStorage.getItem('correctAnswerResult')) {
			correctAnswerResult = JSON.parse(localStorage.getItem('correctAnswerResult'));
			outputCorrectAnswerResult();
		}
		if(localStorage.getItem('correctAnswerResult2')) {
			correctAnswerResult2 = JSON.parse(localStorage.getItem('correctAnswerResult2'));
			outputCorrectAnswerResult2();
		}
		if(localStorage.getItem('arrayBooleanAnswer')) {
			arrayBooleanAnswer = JSON.parse(localStorage.getItem('arrayBooleanAnswer'));
			outputScores();
		}
		if(localStorage.getItem('arrayBooleanAnswer2')) {
			arrayBooleanAnswer2 = JSON.parse(localStorage.getItem('arrayBooleanAnswer2'));
			outputScores2();
		}
	};
	window.addEventListener('load', getLocalStorage);

	console.log(`
		Привет!
		Перевод работает только на настройках и главной страницы.
		Чтобы зайти в результаты на мобильном разрешении (долгий тап по картинке).
		Остальное более-менее должно работать.
		Score: 210 / 220
		1. Стартовая страница и навигация +20 (20)
		2. Настройки +40 (40)
		3. Страница категорий +30 (30) 
		4. Страница с вопросами +50 (50)
		5. Страница с результатами +50 (50)
		6. Плавная смена изображений +10 (10)
		7. Реализована анимация отдельных деталей интерфейса +20 (10)
		8. Дополнительный функционал на выбор +20 (0)
	`);


})
